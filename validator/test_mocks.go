// Code generated by MockGen. DO NOT EDIT.
// Source: validator/processor.go

// Package mock_validator is a generated GoMock package.
package validator

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	common "gitlab.waterfall.network/waterfall/protocol/gwat/common"
	types "gitlab.waterfall.network/waterfall/protocol/gwat/core/types"
	ethdb "gitlab.waterfall.network/waterfall/protocol/gwat/ethdb"
	params "gitlab.waterfall.network/waterfall/protocol/gwat/params"
	era "gitlab.waterfall.network/waterfall/protocol/gwat/validator/era"
)

// Mockblockchain is a mock of blockchain interface.
type Mockblockchain struct {
	ctrl     *gomock.Controller
	recorder *MockblockchainMockRecorder
}

// MockblockchainMockRecorder is the mock recorder for Mockblockchain.
type MockblockchainMockRecorder struct {
	mock *Mockblockchain
}

// NewMockblockchain creates a new mock instance.
func NewMockblockchain(ctrl *gomock.Controller) *Mockblockchain {
	mock := &Mockblockchain{ctrl: ctrl}
	mock.recorder = &MockblockchainMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *Mockblockchain) EXPECT() *MockblockchainMockRecorder {
	return m.recorder
}

// Database mocks base method.
func (m *Mockblockchain) Database() ethdb.Database {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Database")
	ret0, _ := ret[0].(ethdb.Database)
	return ret0
}

// Database indicates an expected call of Database.
func (mr *MockblockchainMockRecorder) Database() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Database", reflect.TypeOf((*Mockblockchain)(nil).Database))
}

// GetConfig mocks base method.
func (m *Mockblockchain) Config() *params.ChainConfig {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetConfig")
	ret0, _ := ret[0].(*params.ChainConfig)
	return ret0
}

// GetConfig indicates an expected call of GetConfig.
func (mr *MockblockchainMockRecorder) Config() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetConfig", reflect.TypeOf((*Mockblockchain)(nil).Config))
}

// GetEraInfo mocks base method.
func (m *Mockblockchain) GetEraInfo() *era.EraInfo {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEraInfo")
	ret0, _ := ret[0].(*era.EraInfo)
	return ret0
}

// GetEraInfo indicates an expected call of GetEraInfo.
func (mr *MockblockchainMockRecorder) GetEraInfo() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEraInfo", reflect.TypeOf((*Mockblockchain)(nil).GetEraInfo))
}

// GetLastCoordinatedCheckpoint mocks base method.
func (m *Mockblockchain) GetLastCoordinatedCheckpoint() *types.Checkpoint {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLastCoordinatedCheckpoint")
	ret0, _ := ret[0].(*types.Checkpoint)
	return ret0
}

// GetLastCoordinatedCheckpoint indicates an expected call of GetLastCoordinatedCheckpoint.
func (mr *MockblockchainMockRecorder) GetLastCoordinatedCheckpoint() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLastCoordinatedCheckpoint", reflect.TypeOf((*Mockblockchain)(nil).GetLastCoordinatedCheckpoint))
}

// GetSlotInfo mocks base method.
func (m *Mockblockchain) GetSlotInfo() *types.SlotInfo {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSlotInfo")
	ret0, _ := ret[0].(*types.SlotInfo)
	return ret0
}

// GetSlotInfo indicates an expected call of GetSlotInfo.
func (mr *MockblockchainMockRecorder) GetSlotInfo() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSlotInfo", reflect.TypeOf((*Mockblockchain)(nil).GetSlotInfo))
}

// GetValidatorSyncData mocks base method.
func (m *Mockblockchain) GetValidatorSyncData(creator common.Address, op types.ValidatorSyncOp) *types.ValidatorSync {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetValidatorSyncData", creator, op)
	ret0, _ := ret[0].(*types.ValidatorSync)
	return ret0
}

// GetValidatorSyncData indicates an expected call of GetValidatorSyncData.
func (mr *MockblockchainMockRecorder) GetValidatorSyncData(creator, op interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetValidatorSyncData", reflect.TypeOf((*Mockblockchain)(nil).GetValidatorSyncData), creator, op)
}

// Mockmessage is a mock of message interface.
type Mockmessage struct {
	ctrl     *gomock.Controller
	recorder *MockmessageMockRecorder
}

// MockmessageMockRecorder is the mock recorder for Mockmessage.
type MockmessageMockRecorder struct {
	mock *Mockmessage
}

// NewMockmessage creates a new mock instance.
func NewMockmessage(ctrl *gomock.Controller) *Mockmessage {
	mock := &Mockmessage{ctrl: ctrl}
	mock.recorder = &MockmessageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *Mockmessage) EXPECT() *MockmessageMockRecorder {
	return m.recorder
}

// Data mocks base method.
func (m *Mockmessage) Data() []byte {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Data")
	ret0, _ := ret[0].([]byte)
	return ret0
}

// Data indicates an expected call of Data.
func (mr *MockmessageMockRecorder) Data() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Data", reflect.TypeOf((*Mockmessage)(nil).Data))
}

// TxHash mocks base method.
func (m *Mockmessage) TxHash() common.Hash {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TxHash")
	ret0, _ := ret[0].(common.Hash)
	return ret0
}

// TxHash indicates an expected call of TxHash.
func (mr *MockmessageMockRecorder) TxHash() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TxHash", reflect.TypeOf((*Mockmessage)(nil).TxHash))
}

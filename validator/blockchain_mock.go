// Code generated by MockGen. DO NOT EDIT.
// Source: validator/era/era.go

// Package mock_era is a generated GoMock package.
package validator

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	types "gitlab.waterfall.network/waterfall/protocol/gwat/core/types"
	ethdb "gitlab.waterfall.network/waterfall/protocol/gwat/ethdb"
	params "gitlab.waterfall.network/waterfall/protocol/gwat/params"
	era "gitlab.waterfall.network/waterfall/protocol/gwat/validator/era"
)

// MockBlockchain is a mock of Blockchain interface.
type MockBlockchain struct {
	ctrl     *gomock.Controller
	recorder *MockBlockchainMockRecorder
}

// MockBlockchainMockRecorder is the mock recorder for MockBlockchain.
type MockBlockchainMockRecorder struct {
	mock *MockBlockchain
}

// NewMockBlockchain creates a new mock instance.
func NewMockBlockchain(ctrl *gomock.Controller) *MockBlockchain {
	mock := &MockBlockchain{ctrl: ctrl}
	mock.recorder = &MockBlockchainMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBlockchain) EXPECT() *MockBlockchainMockRecorder {
	return m.recorder
}

// Database mocks base method.
func (m *MockBlockchain) Database() ethdb.Database {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Database")
	ret0, _ := ret[0].(ethdb.Database)
	return ret0
}

// Database indicates an expected call of Database.
func (mr *MockBlockchainMockRecorder) Database() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Database", reflect.TypeOf((*MockBlockchain)(nil).Database))
}

// GetConfig mocks base method.
func (m *MockBlockchain) GetConfig() *params.ChainConfig {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetConfig")
	ret0, _ := ret[0].(*params.ChainConfig)
	return ret0
}

// GetConfig indicates an expected call of GetConfig.
func (mr *MockBlockchainMockRecorder) GetConfig() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetConfig", reflect.TypeOf((*MockBlockchain)(nil).GetConfig))
}

// GetCoordinatedCheckpointEpoch mocks base method.
func (m *MockBlockchain) GetCoordinatedCheckpointEpoch(epoch uint64) uint64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCoordinatedCheckpointEpoch", epoch)
	ret0, _ := ret[0].(uint64)
	return ret0
}

// GetCoordinatedCheckpointEpoch indicates an expected call of GetCoordinatedCheckpointEpoch.
func (mr *MockBlockchainMockRecorder) GetCoordinatedCheckpointEpoch(epoch interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCoordinatedCheckpointEpoch", reflect.TypeOf((*MockBlockchain)(nil).GetCoordinatedCheckpointEpoch), epoch)
}

// GetEraInfo mocks base method.
func (m *MockBlockchain) GetEraInfo() *era.EraInfo {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEraInfo")
	ret0, _ := ret[0].(*era.EraInfo)
	return ret0
}

// GetEraInfo indicates an expected call of GetEraInfo.
func (mr *MockBlockchainMockRecorder) GetEraInfo() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEraInfo", reflect.TypeOf((*MockBlockchain)(nil).GetEraInfo))
}

// GetSlotInfo mocks base method.
func (m *MockBlockchain) GetSlotInfo() *types.SlotInfo {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSlotInfo")
	ret0, _ := ret[0].(*types.SlotInfo)
	return ret0
}

// GetSlotInfo indicates an expected call of GetSlotInfo.
func (mr *MockBlockchainMockRecorder) GetSlotInfo() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSlotInfo", reflect.TypeOf((*MockBlockchain)(nil).GetSlotInfo))
}

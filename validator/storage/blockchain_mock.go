// Code generated by MockGen. DO NOT EDIT.
// Source: ./validator/storage/storage.go

// Package mock_storage is a generated GoMock package.
package storage

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	common "gitlab.waterfall.network/waterfall/protocol/gwat/common"
	state "gitlab.waterfall.network/waterfall/protocol/gwat/core/state"
	types "gitlab.waterfall.network/waterfall/protocol/gwat/core/types"
)

// Mockblockchain is a mock of blockchain interface.
type Mockblockchain struct {
	ctrl     *gomock.Controller
	recorder *MockblockchainMockRecorder
}

// MockblockchainMockRecorder is the mock recorder for Mockblockchain.
type MockblockchainMockRecorder struct {
	mock *Mockblockchain
}

// NewMockblockchain creates a new mock instance.
func NewMockblockchain(ctrl *gomock.Controller) *Mockblockchain {
	mock := &Mockblockchain{ctrl: ctrl}
	mock.recorder = &MockblockchainMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *Mockblockchain) EXPECT() *MockblockchainMockRecorder {
	return m.recorder
}

// GetBlock mocks base method.
func (m *Mockblockchain) GetBlock(hash common.Hash) *types.Block {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBlock", hash)
	ret0, _ := ret[0].(*types.Block)
	return ret0
}

// GetBlock indicates an expected call of GetBlock.
func (mr *MockblockchainMockRecorder) GetBlock(hash interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBlock", reflect.TypeOf((*Mockblockchain)(nil).GetBlock), hash)
}

// GetCoordinatedCheckpointEpoch mocks base method.
func (m *Mockblockchain) GetCoordinatedCheckpointEpoch(epoch uint64) uint64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCoordinatedCheckpointEpoch", epoch)
	ret0, _ := ret[0].(uint64)
	return ret0
}

// GetCoordinatedCheckpointEpoch indicates an expected call of GetCoordinatedCheckpointEpoch.
func (mr *MockblockchainMockRecorder) GetCoordinatedCheckpointEpoch(epoch interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCoordinatedCheckpointEpoch", reflect.TypeOf((*Mockblockchain)(nil).GetCoordinatedCheckpointEpoch), epoch)
}

// GetSlotInfo mocks base method.
func (m *Mockblockchain) GetSlotInfo() *types.SlotInfo {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSlotInfo")
	ret0, _ := ret[0].(*types.SlotInfo)
	return ret0
}

// GetSlotInfo indicates an expected call of GetSlotInfo.
func (mr *MockblockchainMockRecorder) GetSlotInfo() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSlotInfo", reflect.TypeOf((*Mockblockchain)(nil).GetSlotInfo))
}

// SearchFirstEpochBlockHashRecursive mocks base method.
func (m *Mockblockchain) SearchFirstEpochBlockHashRecursive(epoch uint64) (common.Hash, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchFirstEpochBlockHashRecursive", epoch)
	ret0, _ := ret[0].(common.Hash)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// SearchFirstEpochBlockHashRecursive indicates an expected call of SearchFirstEpochBlockHashRecursive.
func (mr *MockblockchainMockRecorder) SearchFirstEpochBlockHashRecursive(epoch interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchFirstEpochBlockHashRecursive", reflect.TypeOf((*Mockblockchain)(nil).SearchFirstEpochBlockHashRecursive), epoch)
}

// StateAt mocks base method.
func (m *Mockblockchain) StateAt(root common.Hash) (*state.StateDB, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StateAt", root)
	ret0, _ := ret[0].(*state.StateDB)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StateAt indicates an expected call of StateAt.
func (mr *MockblockchainMockRecorder) StateAt(root interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StateAt", reflect.TypeOf((*Mockblockchain)(nil).StateAt), root)
}

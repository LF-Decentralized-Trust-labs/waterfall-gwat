// Code generated by MockGen. DO NOT EDIT.
// Source: dag/finalizer/finalizer.go

// Package mock_finalizer is a generated GoMock package.
package finalizer

import (
	"context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	common "gitlab.waterfall.network/waterfall/protocol/gwat/common"
	core "gitlab.waterfall.network/waterfall/protocol/gwat/core"
	types "gitlab.waterfall.network/waterfall/protocol/gwat/core/types"
	downloader "gitlab.waterfall.network/waterfall/protocol/gwat/eth/downloader"
	params "gitlab.waterfall.network/waterfall/protocol/gwat/params"
)

// MockBackend is a mock of Backend interface.
type MockBackend struct {
	ctrl     *gomock.Controller
	recorder *MockBackendMockRecorder
}

// MockBackendMockRecorder is the mock recorder for MockBackend.
type MockBackendMockRecorder struct {
	mock *MockBackend
}

// NewMockBackend creates a new mock instance.
func NewMockBackend(ctrl *gomock.Controller) *MockBackend {
	mock := &MockBackend{ctrl: ctrl}
	mock.recorder = &MockBackendMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBackend) EXPECT() *MockBackendMockRecorder {
	return m.recorder
}

// BlockChain mocks base method.
func (m *MockBackend) BlockChain() *core.BlockChain {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BlockChain")
	ret0, _ := ret[0].(*core.BlockChain)
	return ret0
}

// BlockChain indicates an expected call of BlockChain.
func (mr *MockBackendMockRecorder) BlockChain() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BlockChain", reflect.TypeOf((*MockBackend)(nil).BlockChain))
}

// Downloader mocks base method.
func (m *MockBackend) Downloader() *downloader.Downloader {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Downloader")
	ret0, _ := ret[0].(*downloader.Downloader)
	return ret0
}

// Downloader indicates an expected call of Downloader.
func (mr *MockBackendMockRecorder) Downloader() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Downloader", reflect.TypeOf((*MockBackend)(nil).Downloader))
}

// MockBlockChain is a mock of BlockChain interface.
type MockBlockChain struct {
	ctrl     *gomock.Controller
	recorder *MockBlockChainMockRecorder
}

// MockBlockChainMockRecorder is the mock recorder for MockBlockChain.
type MockBlockChainMockRecorder struct {
	mock *MockBlockChain
}

// NewMockBlockChain creates a new mock instance.
func NewMockBlockChain(ctrl *gomock.Controller) *MockBlockChain {
	mock := &MockBlockChain{ctrl: ctrl}
	mock.recorder = &MockBlockChainMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBlockChain) EXPECT() *MockBlockChainMockRecorder {
	return m.recorder
}

// CollectAncestorsAftCpByTips mocks base method.
func (m *MockBlockChain) CollectAncestorsAftCpByTips(parents common.HashArray, cpHash common.Hash) (bool, types.HeaderMap, common.HashArray, types.Tips) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CollectAncestorsAftCpByTips", parents, cpHash)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(types.HeaderMap)
	ret2, _ := ret[2].(common.HashArray)
	ret3, _ := ret[3].(types.Tips)
	return ret0, ret1, ret2, ret3
}

// CollectAncestorsAftCpByTips indicates an expected call of CollectAncestorsAftCpByTips.
func (mr *MockBlockChainMockRecorder) CollectAncestorsAftCpByTips(parents, cpHash interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CollectAncestorsAftCpByTips", reflect.TypeOf((*MockBlockChain)(nil).CollectAncestorsAftCpByTips), parents, cpHash)
}

// Config mocks base method.
func (m *MockBlockChain) Config() *params.ChainConfig {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Config")
	ret0, _ := ret[0].(*params.ChainConfig)
	return ret0
}

// Config indicates an expected call of Config.
func (mr *MockBlockChainMockRecorder) Config() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Config", reflect.TypeOf((*MockBlockChain)(nil).Config))
}

// FinalizeTips mocks base method.
func (m *MockBlockChain) FinalizeTips(finHashes common.HashArray, lastFinHash common.Hash, lastFinNr uint64) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "FinalizeTips", finHashes, lastFinHash, lastFinNr)
}

// FinalizeTips indicates an expected call of FinalizeTips.
func (mr *MockBlockChainMockRecorder) FinalizeTips(finHashes, lastFinHash, lastFinNr interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FinalizeTips", reflect.TypeOf((*MockBlockChain)(nil).FinalizeTips), finHashes, lastFinHash, lastFinNr)
}

// GetBlock mocks base method.
func (m *MockBlockChain) GetBlock(ctx context.Context, hash common.Hash) *types.Block {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBlock", hash)
	ret0, _ := ret[0].(*types.Block)
	return ret0
}

// GetBlock indicates an expected call of GetBlock.
func (mr *MockBlockChainMockRecorder) GetBlock(hash interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBlock", reflect.TypeOf((*MockBlockChain)(nil).GetBlock), hash)
}

// GetBlockByHash mocks base method.
func (m *MockBlockChain) GetBlockByHash(hash common.Hash) *types.Block {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBlockByHash", hash)
	ret0, _ := ret[0].(*types.Block)
	return ret0
}

// GetBlockByHash indicates an expected call of GetBlockByHash.
func (mr *MockBlockChainMockRecorder) GetBlockByHash(hash interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBlockByHash", reflect.TypeOf((*MockBlockChain)(nil).GetBlockByHash), hash)
}

// GetBlockDag mocks base method.
func (m *MockBlockChain) GetBlockDag(hash common.Hash) *types.BlockDAG {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBlockDag", hash)
	ret0, _ := ret[0].(*types.BlockDAG)
	return ret0
}

// GetBlockDag indicates an expected call of GetBlockDag.
func (mr *MockBlockChainMockRecorder) GetBlockDag(hash interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBlockDag", reflect.TypeOf((*MockBlockChain)(nil).GetBlockDag), hash)
}

// GetBlockFinalizedNumber mocks base method.
func (m *MockBlockChain) GetBlockFinalizedNumber(hash common.Hash) *uint64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBlockFinalizedNumber", hash)
	ret0, _ := ret[0].(*uint64)
	return ret0
}

// GetBlockFinalizedNumber indicates an expected call of GetBlockFinalizedNumber.
func (mr *MockBlockChainMockRecorder) GetBlockFinalizedNumber(hash interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBlockFinalizedNumber", reflect.TypeOf((*MockBlockChain)(nil).GetBlockFinalizedNumber), hash)
}

// GetBlocksByHashes mocks base method.
func (m *MockBlockChain) GetBlocksByHashes(hashes common.HashArray) types.BlockMap {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBlocksByHashes", hashes)
	ret0, _ := ret[0].(types.BlockMap)
	return ret0
}

// GetBlocksByHashes indicates an expected call of GetBlocksByHashes.
func (mr *MockBlockChainMockRecorder) GetBlocksByHashes(hashes interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBlocksByHashes", reflect.TypeOf((*MockBlockChain)(nil).GetBlocksByHashes), hashes)
}

// GetHeader mocks base method.
func (m *MockBlockChain) GetHeader(hash common.Hash) *types.Header {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetHeader", hash)
	ret0, _ := ret[0].(*types.Header)
	return ret0
}

// GetHeader indicates an expected call of GetHeader.
func (mr *MockBlockChainMockRecorder) GetHeader(hash interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHeader", reflect.TypeOf((*MockBlockChain)(nil).GetHeader), hash)
}

// GetHeaderByNumber mocks base method.
func (m *MockBlockChain) GetHeaderByNumber(number uint64) *types.Header {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetHeaderByNumber", number)
	ret0, _ := ret[0].(*types.Header)
	return ret0
}

// GetHeaderByNumber indicates an expected call of GetHeaderByNumber.
func (mr *MockBlockChainMockRecorder) GetHeaderByNumber(number interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHeaderByNumber", reflect.TypeOf((*MockBlockChain)(nil).GetHeaderByNumber), number)
}

// GetHeadersByHashes mocks base method.
func (m *MockBlockChain) GetHeadersByHashes(hashes common.HashArray) types.HeaderMap {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetHeadersByHashes", hashes)
	ret0, _ := ret[0].(types.HeaderMap)
	return ret0
}

// GetHeadersByHashes indicates an expected call of GetHeadersByHashes.
func (mr *MockBlockChainMockRecorder) GetHeadersByHashes(hashes interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHeadersByHashes", reflect.TypeOf((*MockBlockChain)(nil).GetHeadersByHashes), hashes)
}

// GetLastFinalizedBlock mocks base method.
func (m *MockBlockChain) GetLastFinalizedBlock() *types.Block {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLastFinalizedBlock")
	ret0, _ := ret[0].(*types.Block)
	return ret0
}

// GetLastFinalizedBlock indicates an expected call of GetLastFinalizedBlock.
func (mr *MockBlockChainMockRecorder) GetLastFinalizedBlock() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLastFinalizedBlock", reflect.TypeOf((*MockBlockChain)(nil).GetLastFinalizedBlock))
}

// GetLastFinalizedHeader mocks base method.
func (m *MockBlockChain) GetLastFinalizedHeader() *types.Header {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLastFinalizedHeader")
	ret0, _ := ret[0].(*types.Header)
	return ret0
}

// GetLastFinalizedHeader indicates an expected call of GetLastFinalizedHeader.
func (mr *MockBlockChainMockRecorder) GetLastFinalizedHeader() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLastFinalizedHeader", reflect.TypeOf((*MockBlockChain)(nil).GetLastFinalizedHeader))
}

// GetLastFinalizedNumber mocks base method.
func (m *MockBlockChain) GetLastFinalizedNumber() uint64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLastFinalizedNumber")
	ret0, _ := ret[0].(uint64)
	return ret0
}

// GetLastFinalizedNumber indicates an expected call of GetLastFinalizedNumber.
func (mr *MockBlockChainMockRecorder) GetLastFinalizedNumber() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLastFinalizedNumber", reflect.TypeOf((*MockBlockChain)(nil).GetLastFinalizedNumber))
}

// GetOptimisticSpines mocks base method.
func (m *MockBlockChain) GetOptimisticSpines(gtSlot uint64) ([]common.HashArray, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOptimisticSpines", gtSlot)
	ret0, _ := ret[0].([]common.HashArray)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOptimisticSpines indicates an expected call of GetOptimisticSpines.
func (mr *MockBlockChainMockRecorder) GetOptimisticSpines(gtSlot interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOptimisticSpines", reflect.TypeOf((*MockBlockChain)(nil).GetOptimisticSpines), gtSlot)
}

// GetTips mocks base method.
func (m *MockBlockChain) GetTips() types.Tips {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTips")
	ret0, _ := ret[0].(types.Tips)
	return ret0
}

// GetTips indicates an expected call of GetTips.
func (mr *MockBlockChainMockRecorder) GetTips() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTips", reflect.TypeOf((*MockBlockChain)(nil).GetTips))
}

// ReadFinalizedHashByNumber mocks base method.
func (m *MockBlockChain) ReadFinalizedHashByNumber(number uint64) common.Hash {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadFinalizedHashByNumber", number)
	ret0, _ := ret[0].(common.Hash)
	return ret0
}

// ReadFinalizedHashByNumber indicates an expected call of ReadFinalizedHashByNumber.
func (mr *MockBlockChainMockRecorder) ReadFinalizedHashByNumber(number interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadFinalizedHashByNumber", reflect.TypeOf((*MockBlockChain)(nil).ReadFinalizedHashByNumber), number)
}

// ReadFinalizedNumberByHash mocks base method.
func (m *MockBlockChain) ReadFinalizedNumberByHash(hash common.Hash) *uint64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadFinalizedNumberByHash", hash)
	ret0, _ := ret[0].(*uint64)
	return ret0
}

// ReadFinalizedNumberByHash indicates an expected call of ReadFinalizedNumberByHash.
func (mr *MockBlockChainMockRecorder) ReadFinalizedNumberByHash(hash interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadFinalizedNumberByHash", reflect.TypeOf((*MockBlockChain)(nil).ReadFinalizedNumberByHash), hash)
}

// ResetRollbackActive mocks base method.
func (m *MockBlockChain) ResetRollbackActive() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ResetRollbackActive")
}

// ResetRollbackActive indicates an expected call of ResetRollbackActive.
func (mr *MockBlockChainMockRecorder) ResetRollbackActive() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResetRollbackActive", reflect.TypeOf((*MockBlockChain)(nil).ResetRollbackActive))
}

// RollbackFinalization mocks base method.
func (m *MockBlockChain) RollbackFinalization(spineHash common.Hash, lfNr uint64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RollbackFinalization", spineHash, lfNr)
	ret0, _ := ret[0].(error)
	return ret0
}

// RollbackFinalization indicates an expected call of RollbackFinalization.
func (mr *MockBlockChainMockRecorder) RollbackFinalization(spineHash, lfNr interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RollbackFinalization", reflect.TypeOf((*MockBlockChain)(nil).RollbackFinalization), spineHash, lfNr)
}

// SaveBlockDag mocks base method.
func (m *MockBlockChain) SaveBlockDag(blockDag *types.BlockDAG) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SaveBlockDag", blockDag)
}

// SaveBlockDag indicates an expected call of SaveBlockDag.
func (mr *MockBlockChainMockRecorder) SaveBlockDag(blockDag interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveBlockDag", reflect.TypeOf((*MockBlockChain)(nil).SaveBlockDag), blockDag)
}

// SetRollbackActive mocks base method.
func (m *MockBlockChain) SetRollbackActive() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetRollbackActive")
}

// SetRollbackActive indicates an expected call of SetRollbackActive.
func (mr *MockBlockChainMockRecorder) SetRollbackActive() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetRollbackActive", reflect.TypeOf((*MockBlockChain)(nil).SetRollbackActive))
}

// UpdateFinalizingState mocks base method.
func (m *MockBlockChain) UpdateFinalizingState(block, stateBlock *types.Block) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateFinalizingState", block, stateBlock)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateFinalizingState indicates an expected call of UpdateFinalizingState.
func (mr *MockBlockChainMockRecorder) UpdateFinalizingState(block, stateBlock interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateFinalizingState", reflect.TypeOf((*MockBlockChain)(nil).UpdateFinalizingState), block, stateBlock)
}

// WriteFinalizedBlock mocks base method.
func (m *MockBlockChain) WriteFinalizedBlock(finNr uint64, block *types.Block, isHead bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WriteFinalizedBlock", finNr, block, isHead)
	ret0, _ := ret[0].(error)
	return ret0
}

// WriteFinalizedBlock indicates an expected call of WriteFinalizedBlock.
func (mr *MockBlockChainMockRecorder) WriteFinalizedBlock(finNr, block, isHead interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WriteFinalizedBlock", reflect.TypeOf((*MockBlockChain)(nil).WriteFinalizedBlock), finNr, block, isHead)
}
